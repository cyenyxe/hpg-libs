#include "ped_reader.h"

static size_t lines = 0;
static size_t records = 0;

static ped_record_t *current_record;
static ped_batch_t *current_batch;

static int record_error = 0;
static int num_spaces = 0;

static enum PED_Field current_field = FAMILY_ID;

%%{
    machine ped;
    write data;

    number      = (digit)+ ("." (digit)+)? ;
    bases       = ("A" | "C" | "G" | "T" | "N")+ ;
    comment     = "#" (print)* ;

    #########################################
    #                Records                #
    #########################################

    # Records rules
    record_family   = empty | (alnum | punct)+ ;
    record_indiv    = empty | (alnum | "_")+ ;
    record_father   = empty | (alnum | "_")+ ;
    record_mother   = empty | (alnum | "_")+ ;
    record_sex      = empty | number ;
    record_phenot   = empty | number ;
    record_genotype = (bases | "." )+ ;


    #########################################
    #                Machine                #
    #########################################

    main := |*
        comment @ 6         => {
            LOG_DEBUG("Comment found, nothing to do.");
        };

        record_family @ 5   => {
            set_field(ts, te);
        };
        
        record_indiv @ 5    => {
            set_field(ts, te);
        };
        
        record_father @ 5   => {
            set_field(ts, te);
        };
        
        record_mother @ 5   => {
            set_field(ts, te);
        };
        
        record_sex @ 5      => {
            set_field(ts, te);
        };
        
        record_phenot @ 5   => {
            set_field(ts, te);
        };
        
        record_genotype @ 6 => {
            LOG_DEBUG("Genotypes found, nothing to do.");
        };
        
        "\n"        => {
            // If batch is full, add to the list of batches and create a new, empty one
            if (ped_batch_is_full(current_batch))
            {
                list_item_t *item = list_item_new(records, 1, current_batch);
                list_insert_item(item, batches_list);
                LOG_DEBUG_F("Batch added - %zu records\n", current_batch->length);
                current_batch = ped_batch_new(batch_size);
            }
            
            // If not a blank line nor erroneous record, add current record to current batch
            if (current_field > PHENOTYPE) {
                add_record_to_ped_batch(current_record, current_batch);
                records++;
            } else {
                if (current_field > FAMILY_ID) {
                    LOG_ERROR_F("Line %d - %d field(s) missing\n", lines, OTHER - current_field);
                    free(current_record);
                }
            }
            
            lines++;
            current_field = FAMILY_ID;
            record_error = 0;
            LOG_DEBUG_F("End of line %d\n", lines);
        };
        
        space;
    *|;

}%%


static char* get_token(char *ts, char *te) {
    char *field = (char*) malloc ((te-ts+1) * sizeof(char));
    strncpy(field, ts, (te-ts));
    field[te-ts] = '\0';
    return field;
}

static void set_field(char* ts, char *te) {
    if (current_field == OTHER) {
        return;
    }

    char *field = get_token(ts, te);
    float float_val = -1.0f;
    enum Sex sex;

    switch (current_field) {
        case FAMILY_ID:
            current_record = create_ped_record();
            set_ped_record_family_id(field, current_record);
        break;
        case INDIVIDUAL_ID:
            set_ped_record_individual_id(field, current_record);
            // If family is not set, assign same value as the individual ID
            if (current_record->family_id == NULL) {
                set_ped_record_family_id(field, current_record);
            }
        break;
        case FATHER_ID:
            if (strncmp("0", field, 1) != 0) {
                set_ped_record_father_id(field, current_record);
            } else {
                free(field);    // Not set as ped_record_t variable -> not freed later
            }
        break;
        case MOTHER_ID:
            if (strncmp("0", field, 1) != 0) {
                set_ped_record_mother_id(field, current_record);
            } else {
                free(field);    // Not set as ped_record_t variable -> not freed later
            }
        break;
        case SEX:
            sex = UNKNOWN;
            if (atoi(field) == 1) {
               sex = MALE;
            } else if (atoi(field) == 2) {
               sex = FEMALE;
            }
            set_ped_record_sex(sex, current_record);
            free(field);    // Not set as ped_record_t variable -> not freed later
        break;
        case PHENOTYPE:
            if (strncmp(".", field, 1) != 0) {
                float_val = atof(field);
            }
            set_ped_record_phenotype(float_val, current_record);
            free(field);    // Not set as ped_record_t variable -> not freed later
        break;
        default:
            LOG_DEBUG_F("Field with unknown structure: '%s'\n", field);
            free(field);
    }

    LOG_DEBUG_F("Line %zu, current_field = %d\n", lines, current_field);
    current_field++;
}

int ped_ragel_read(list_t *batches_list, size_t batch_size, ped_file_t *file)
{
    int cs;
    char *p = file->data;
    char *pe = p + file->data_len;
    char *eof = pe;
    char *ts, *te;
    int stack[4];
    int top, act;

    current_batch = ped_batch_new(batch_size);

    %%{
        write init;
        write exec;
    }%% 

    // Insert the last batch
    if (!ped_batch_is_empty(current_batch))
    {
        list_item_t *item = list_item_new(records, 1, current_batch); 
        list_insert_item(item, batches_list);
        LOG_DEBUG_F("Batch added - %zu records (last)\n", current_batch->length);
    }

    if ( cs < %%{ write first_final; }%% ) 
    {
        LOG_ERROR("The file was not successfully read\n");
        LOG_INFO_F("Last state is %d, but %d was expected\n", 
                cs, %%{ write first_final; }%%);
    } 

    LOG_INFO_F("Records read = %zu\n", records);

    return cs < %%{ write first_final; }%%;
}
