#include "ped_reader.h"

static size_t records = 0;

static ped_record_t *current_record;
static ped_header_entry_t *current_header_entry;
static ped_batch_t *current_batch;

static enum PED_Field current_field = SEQUENCE;

%%{
    machine ped;
    write data;

    number      = (digit)+ ("." (digit)+)? ;
    bases       = ("A" | "C" | "G" | "T" | "N")+ ;
    identifier  = (alnum)+ ;

    comment     = "#" (print)* ;

    #########################################
    #                Records                #
    #########################################

    # Records rules
    record_family   = empty | (alnum | "_")+ ;
    record_indiv    = empty | (alnum | "_")+ ;
    record_father   = empty | (alnum | "_")+ ;
    record_mother   = empty | (alnum | "_")+ ;
    record_sex      = empty | number ;
    record_phenot   = empty | number ;
    record_rest     = empty | (print)+ ;

    record		= record_family "\t" record_indiv "\t" record_father "\t" record_mother "\t" record_sex "\t" record_phenot "\t" record_rest ;
    records		= record ("\n" record)* ("\n")? ;

    # Records scanner
    record_scan	:= |*
        record_family  	=> {
            set_field(ts, te);
        };
        
        record_indiv	=> {
            set_field(ts, te);
        };
        
        record_father 	=> {
            set_field(ts, te);
        };
        
        record_mother 	=> {
            set_field(ts, te);
        };
        
        record_sex 	    => {
            set_field(ts, te);
        };
        
        record_phenot 	=> {
            set_field(ts, te);
        };
        
        record_rest;
        
        "\n"		=> {
            // If batch is full, add to the list of batches and create a new, empty one
            if (ped_batch_is_full(current_batch))
            {
                list_item_t *item = list_item_new(records, 1, current_batch); 
                list_insert_item(item, batches_list);
                LOG_DEBUG_F("Batch added - %zu records\n", current_batch->length);
                current_batch = ped_batch_new(batch_size);
            }
            
            // If not a blank line, add current record to current batch
            if (current_field != SEQUENCE) {
                add_record_to_ped_batch(current_record, current_batch);
            }
            
            current_field = SEQUENCE;
            records++;
            LOG_DEBUG("\n");
        };
        
        space;
    *|;


    #########################################
    #                Machine                #
    #########################################

    main		:= records >{ fhold; fcall record_scan; } ;

}%%


static char* get_token(char *ts, char *te)
{
    char *field = (char*) malloc ((te-ts+1) * sizeof(char));
    strncpy(field, ts, (te-ts));
    field[te-ts] = '\0';
    return field;
}

static void set_field(char* ts, char *te)
{
    char *field = get_token(ts, te);
    float float_val = -1.0f;

    switch (current_field)
    {
        case SEQUENCE:
            current_record = create_ped_record();
            set_ped_record_sequence(field, current_record);
        break;
        case SOURCE:
            set_ped_record_source(field, current_record);
        break;
        case FEATURE:
            set_ped_record_feature(field, current_record);
        break;
        case START:
            set_ped_record_start(atol(field), current_record);
            free(field);    // Not set as ped_record_t variable -> not freed later
        break;
        case END:
            set_ped_record_end(atol(field), current_record);
            free(field);    // Not set as ped_record_t variable -> not freed later
        break;
        case SCORE:
            if (strncmp(".", field, 1) != 0)
            {
                float_val = atof(field);
            }
            set_ped_record_score(float_val, current_record);
            free(field);	// Not set as ped_record_t variable -> not freed later
        break;
        case STRAND:
            if (field != NULL && strlen(field) > 0) {
                set_ped_record_strand(field[0], current_record);
            }
        break;
        case FRAME:
            if (strncmp(".", field, 1) != 0)
            {
                float_val = atof(field);
            }
            set_ped_record_frame(float_val, current_record);
            free(field);    // Not set as ped_record_t variable -> not freed later
        break;
        case ATTRIBUTE:
            set_ped_record_attribute(field, current_record);
        break;
    }

    current_field++;
}

int ped_ragel_read(list_t *batches_list, size_t batch_size, ped_file_t *file)
{
    int cs;
    char *p = file->data;
    char *pe = p + file->data_len;
    char *eof = pe;
    char *ts, *te;
    int stack[4];
    int top, act;

    current_header_entry = create_ped_header_entry();
    current_batch = ped_batch_new(batch_size);

    %%{
        write init;
        write exec;
    }%% 

    // Insert the last batch
    if (!ped_batch_is_empty(current_batch))
    {
        list_item_t *item = list_item_new(records, 1, current_batch); 
        list_insert_item(item, batches_list);
        LOG_DEBUG_F("Batch added - %zu records (last)\n", current_batch->length);
    }

    if ( cs < %%{ write first_final; }%% ) 
    {
        LOG_INFO_F("Last state is %d, but %d was expected\n", 
                cs, %%{ write first_final; }%%);
    } 

    LOG_INFO_F("Records read = %zu\n", records);

    // Free current_xxx pointers if not needed in another module
    ped_header_entry_free(current_header_entry);

    return cs < %%{ write first_final; }%%;
}
