#include "vcf_reader.h"

int lines = 0;
int batches = 0;
// int count = 0;

%%{
    machine vcf;
    write data;

    #############################################
    #             Actions definition            #
    #############################################

    action linebreak {
        lines++;
    }
    
    action header_id_begin {
        ts = p;
    }

    action header_id_end {
        set_header_entry_name(ts, p-2-ts, status->current_header_entry);
    }

    action header_field_id_begin {
        ts = p;
    }

    action header_field_id_end {
        if (status->current_header_entry->name != NULL)
        {
            add_header_entry_key(ts, p-ts, status->current_header_entry);
        } else {
            // Entries like ##reference=some_text_here
            status->current_header_entry = create_header_entry();
            set_header_entry_name(ts, p-ts, status->current_header_entry);
        }
    }

    action header_field_value_begin {
        ts = p;
    }

    action header_field_value_end {
        // Remove quotation marks if necessary
        char *start = ts, *end = p;
        if (*ts == '"') start = ts + 1;
        if (*(p-1) == '"') end = p - 1;
        
        add_header_entry_value(start, end-start, status->current_header_entry);
    }

    action sample_name_begin {
        ts = p;
    }

    action sample_name_end {
        add_sample_name(ts, p-ts, file);
    }

    action record_begin {
        status->current_record = create_record();
    }
	
    action record_end {
        // If batch is full, add to the list of batches and create a new, empty one
//         if (vcf_batch_is_full(status->current_batch))
        if (batch_size > 0 && status->current_batch->records->size == batch_size)
        {
            list_item_t *item = list_item_new(file->num_records, 1, status->current_batch); 
            list_insert_item(item, batches_list);
//             printf("Batch %d added - %zu records\t", batches, status->current_batch->records->size);
            status->current_batch = vcf_batch_new(batch_size);           
            if (p+1) {
                status->current_batch->text = p+1;
//                 printf("batch text = '%.*s'\n", 50, status->current_batch->text);
            }
            batches++;
        }

        // If not a blank line, add status->current record to status->current batch
//         if (status->current_field != CHROM) {
            add_record_to_vcf_batch(status->current_record, status->current_batch);
            status->num_records++;
//             printf("Record %zu added\n", status->num_records);
//         }
        
//         status->current_field = CHROM;
        status->num_samples = 0;
//         LOG_DEBUG("\n");
    }
	
    action chrom_begin {
        ts = p;
//         printf("chromosome begin %c%c\n", ts[0], ts[3]);
    }

    action chrom_end {
//         printf("chromosome end %c...%c\n", *ts, *p);
        set_record_chromosome(ts, p-ts, status->current_record);
    }

action chrom_error {
        printf("Line %d: Error in 'chromosome' field\n", lines);
    }

    action pos_begin {
        ts = p;
//         printf("position\n");
    }

    action pos_end {
        char *field = strndup(ts, p-ts);
        set_record_position(atol(field), status->current_record);
//         printf("Position = %ld\n", atol(field));
        free(field);
    }

    action pos_error {
        printf("Line %d: Error in 'position' field\n", lines);
    }

    action id_begin {
        ts = p;
//         printf("id\n");
    }

    action id_end {
        set_record_id(ts, p-ts, status->current_record);
    }

    action id_error {
        printf("Line %d: Error in 'id' field\n", lines);
    }

    action ref_begin {
        ts = p;
//         printf("reference\n");
    }

    action ref_end {
        set_record_reference(ts, p-ts, status->current_record);
    }

    action ref_error {
        printf("Line %d: Error in 'reference' field\n", lines);
    }

    action alt_begin {
        ts = p;
//         printf("alternate\n");
    }

    action alt_end {
        if (!strncmp("0", ts, 1) || !strncmp("<DEL>", ts, 5)) {
            set_record_alternate(".", 1, status->current_record);
        } else {
            set_record_alternate(ts, p-ts, status->current_record);
        }
    }

    action alt_error {
        printf("Line %d: Error in 'alternate' field\n", lines);
    }

    action qual_begin {
        ts = p;
//         printf("quality\n");
    }

    action qual_end {
        float quality = -1.0f;
        if (strncmp(".", ts, 1) != 0) {
            char *field = strndup(ts, p-ts);
            quality = atof(field);
            free(field);
        }
        set_record_quality(quality, status->current_record);
    }

    action qual_error {
        printf("Line %d: Error in 'quality' field\n", lines);
    }

    action filter_begin {
        ts = p;
//         printf("filter\n");
    }

    action filter_end {
        set_record_filter(ts, p-ts, status->current_record);
    }

    action filter_error {
        printf("Line %d: Error in 'filter' field\n", lines);
    }

    action info_begin {
        ts = p;
//         printf("info\n");
    }

    action info_end {
        set_record_info(ts, p-ts, status->current_record);
    }

    action info_error {
        printf("Line %d: Error in 'info' field\n", lines);
    }

    action format_begin {
        ts = p;
//         printf("format\n");
    }

    action format_end {
        set_record_format(ts, p-ts, status->current_record);
    }

    action format_error {
        printf("Line %d: Error in 'format' field\n", lines);
    }

    action sample_begin {
        ts = p;
//         printf("sample\n");
    }

    action sample_end {
        add_record_sample(ts, p-ts, status->current_record);
    }

    action sample_error {
        printf("Line %d: Error in sample\n", lines);
    }

    #################################################
    #               Machine definition              #
    #################################################

    number		= (digit)+ ("." (digit)+)? ;					# Integer or floating-point number
    bases		= ("A" | "C" | "G" | "T" | "N")+ ;
    identifier	= (alnum)+ ;

    # File format
    format_name	= (alnum | punct)+ ;
    fileformat	= "##fileformat=" format_name "\n" >linebreak;

    # Header
    field_name	= identifier ;
    field_value	= (print)+ ;
    header_field	= (field_name "=")? field_value ;
    entry_name	= (alnum | "_")+ ;
    header_entry	= "##" identifier "=<" (header_field)+ ">\n" | "##" identifier "=" field_value "\n" | "##" field_value "\n" >linebreak ;
    header		= (header_entry)+ ;

    # Delimiter between header and records
    sample_name	= (print - ("\n" | "\t"))+ ;
    delimiter	= "#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT" ("\t" sample_name >sample_name_begin %sample_name_end)+ "\n" >linebreak;

    # Records
    record_chrom	= (alnum | "_")+ ;
    record_pos	= (digit)+ ;
    record_id	= (alnum)+ | "." ;					# Alphanumeric string or one dot
    record_ref	= bases ;
    record_alt	= (bases ("," bases)*)+ | "." | "<DEL>" | "0" ;				# Comma-separated bases or one dot
    record_qual	= number | "." ;					# Number or dot

    filter_value	= (alnum | "_")+ ;
    filter_entry	= filter_value ("," filter_value)* ;
    record_filter	= "." | filter_entry (";" filter_entry)* ;


    info_id		= (alnum | "_")+ | "." ;
    info_value	= (print - space)+ ;
    info_value_list	= info_value ("," info_value)* ;
    info_entry	= info_id | info_id "=" info_value_list ;
    record_info	= info_entry (";" info_entry)* ;

    record_format	= (alnum)+ (":" (alnum)+)* ;
    record_sample	= (alnum | punct)+ (":" (alnum | punct)+)* ;
    record		= (record_chrom >chrom_begin %chrom_end $err(chrom_error) "\t" 
                    record_pos >pos_begin %pos_end $err(pos_error) "\t" 
                    record_id >id_begin %id_end $err(id_error) "\t" 
                    record_ref >ref_begin %ref_end $err(ref_error) "\t" 
                    record_alt >alt_begin %alt_end $err(alt_error) "\t" 
                    record_qual >qual_begin %qual_end $err(qual_error) "\t" 
                    record_filter >filter_begin %filter_end $err(filter_error) "\t" 
                    record_info >info_begin %info_end $err(info_error) "\t" 
                    record_format >format_begin %format_end $err(format_error) 
                    ("\t" record_sample >sample_begin %sample_end $err(sample_error))+) 
                    >record_begin %record_end ;
    records		=  record ("\n" >linebreak record)* ("\n")? ;

    # Machine start
    main        := (fileformat)? ("\n")* (header)? ("\n")* (delimiter)? ("\n")* (records)? ("\n")* ;


}%%


int execute_vcf_ragel_machine(char *p, char *pe, list_t *batches_list, size_t batch_size, vcf_file_t *file, vcf_reader_status *status) {
    int cs;
    char *ts, *te;
    int stack[4];
    int top, act;
    char *eof = pe;

    status->current_batch->text = p;
//     printf("ragel - batch text = '%.*s'\n", 50, status->current_batch->text);

    %%{
        write init;
        write exec;
    }%%
    
    if (!vcf_batch_is_empty(status->current_batch)) {
        list_item_t *item = list_item_new(file->num_records, 1, status->current_batch);
        list_insert_item(item, batches_list);
//         printf("Batch added - %zu records (self-contained)\n", status->current_batch->records->size);
    }

//     printf("ragel - first chromosome = %.*s\n", 
//            ((vcf_record_t*) status->current_batch->records->items[0])->chromosome_len, 
//            ((vcf_record_t*) status->current_batch->records->items[0])->chromosome);
// 
//     printf("final state should be a minimum of %d, was %d\n",  %%{ write first_final; }%%, cs);
    return cs < %%{ write first_final; }%%;
}
